# Configure the AWS provider
provider "aws" {
  region = "us-east-1"
}

# Create an S3 bucket to store the Python code
resource "aws_s3_bucket" "python_code_bucket" {
  bucket = "my-python-code-bucket"
}

# Upload the Python code to the S3 bucket
resource "aws_s3_bucket_object" "python_code" {
  bucket = aws_s3_bucket.python_code_bucket.id
  key    = "rekognition.py"
  source = "path/to/rekognition.py"
}

# Create an IAM role for the Lambda function
resource "aws_iam_role" "lambda_role" {
  name = "lambda_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Attach a policy to the IAM role with the necessary permissions
resource "aws_iam_role_policy_attachment" "lambda_policy" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}

# Create the Lambda function
resource "aws_lambda_function" "rekognition_lambda" {
  filename      = "rekognition.py"
  function_name = "rekognition_lambda"
  role          = aws_iam_role.lambda_role.arn
  handler       = "rekognition.lambda_handler"
  runtime       = "python3.9"

  environment {
    variables = {
      BUCKET_NAME    = aws_s3_bucket.python_code_bucket.id
      SOURCE_FOLDER  = "source-images"
      RESULTS_FOLDER = "results"
    }
  }

  # Configure the CloudWatch event trigger to run the Lambda function daily
  # at 12:00 AM UTC
  event_source_token = time_utc("00:00")
  event_source_type  = "schedule-expression"
}

# Define the CloudWatch event source token
# This token specifies the time the event will trigger
# In this example, the event triggers every day at 12:00 AM UTC
locals {
  time_utc = "cron(0 0 * * ? *)"
}
